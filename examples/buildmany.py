"""
This is an example of how to build multiple networks and copy the results for archiving
"""

from snnbuilder.models.mini import Mini_Network
from snnbuilder.models.mnist import CNN_Mnist, Zambrano_Mnist, LeNet_Mnist, LeNet_padded_Mnist, MultiLayerPerceptron_Mnist
from snnbuilder.models.cifar10 import LeNet_Cifar10, Rueckauer_Cifar10
import os
import shutil


def build_many(output_path=None):
    if output_path is None:
        output_path = os.path.dirname(os.path.realpath(__file__))

    # create output directory for new results
    results_path = os.path.join(output_path, '../outputs/results')
    if os.path.isdir(results_path):
        shutil.rmtree(results_path)
    os.mkdir(results_path)

    models = [# Mini_Network,
              CNN_Mnist,
              Zambrano_Mnist,
              # LeNet_Mnist,
              # LeNet_padded_Mnist,
              MultiLayerPerceptron_Mnist,
              # LeNet_Cifar10,
              # Rueckauer_Cifar10
              ]

    build_errors = []

    for model in models:
        x = model(samples=100, epochs=5)
        x.train()
        x.parse()
        x.sim()
        x.graph()

        model_results_dir = os.path.join(results_path, x.model_name)
        os.mkdir(model_results_dir)

        # copy files to results sub directory
        for f in ['graph', 'log.txt', '.config', 'training_plot.png', 'training_history.csv', x.model_name + '.h5']:
            src = os.path.join(x.path_wd, f)
            dest = os.path.join(model_results_dir, f)
            try:
                shutil.copy(src, dest)
            except FileNotFoundError:
                print(f, 'was not generated by model', x.model_name)
                build_errors.append(f + ' was not generated by model ' + x.model_name)

    print('models trained, parsed, and sim:')
    for model in models:
        print('\t', model.__name__)
    print('results copied to', results_path)
    if build_errors:
        print('build errors:')
        for error in build_errors:
            print(error)


if __name__ == '__main__':
    build_many()
